services:
  postgres:
    image: postgres:17.0
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - backend-network

  backend:
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    image: backend_server
    build: .
    env_file: ./.env
    ports:
      - $SPRING_LOCAL_PORT:8080
      - $DEBUG_PORT:5005
    environment:
      SPRING_APPLICATION_JSON: '{     
        "spring.datasource.url" : "jdbc:postgresql://postgres:5432/$POSTGRES_DB",
        "spring.datasource.username" : "$POSTGRES_USER",
        "spring.datasource.password" : "$POSTGRES_PASSWORD",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "validate",
        "spring.jpa.show-sql" : "true",
        "spring.jpa.open-in-view" : "false"
      }'
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$DEBUG_PORT"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

volumes:
  postgres_data:

networks:
  backend-network:
    driver: bridge
